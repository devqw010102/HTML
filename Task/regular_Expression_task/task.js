// https://velog.io/@purplew/Javascript-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D

// 1. 이메일 형식이 맞는지 검사하는 정규식을 작성하시오.
//  예시: hello@gmail.com → ✅ / hello.gmail → ❌
console.log("Q1");
console.log(/^[\w.-]+@[\w.-]+\.[A-Za-z]{2,}$/.test("hello@gmail.com"));
console.log("Q1-1");
// [@\w.-] : 괄호안에 @가 들어가면 @뒤에 문자 없어도 true return
console.log(/^[\w.-]+[@\w.-]+\.[A-Za-z]{2,}$/.test("hello@.com"));  
/*
    ^문자열 : 문자열의 시작을 의미
    \w : 알파벳, 숫자 , 언더스코어(_)
    . : 마침표 문자 그대로
    - : 하이픈 문자 그대로
    [] : 괄호안의 문자들 중 하나
    ^[\w.-] : @기준으로 이메일 앞부분은 abc, abc.def, abc-def와 같은 형태를 허용

    + : + 기호를 기준으로 앞에 문자들이 1개 이상 반복됨
    @ : @가 반드시 들어가야 함을 의미
    +@[\w.-] : @가 한개 이상 있어야함
    A-Za-z : 대, 소문자 알파벳

    {2,} : 2개이상
    이메일 반례 : .co.kr, .com, .kr, .info => .이 2개일 가능성

    /^[\w.-]+@[\w.-] : 첫 [] 안의 문자로 시작하고, 이 문자 뒤에는 @가 있어야함, @뒤에도 문자가 있어야함 
*/

// 2. 문자열이 010으로 시작하는지 검사하는 정규식을 작성하시오.
//  예시: 010-1234-5678 → ✅ / 011-5678-1234 → ❌
console.log("Q2");
console.log(/^(010|011)-\d{4}-\d{4}/.test("010-1234-5678"));
/*
    ^(010|011) : 010 또는 011로 시작
    \d : 숫자만
    {숫자} : 숫자만큼의 길이가 되어야함
    -\d{4} : 하이픈 뒤에 숫자 4글자 있어야함
*/

// 3. 문자열이 숫자만으로 이루어져 있는지 검사하는 정규식을 작성하시오.
//  예시: 12345 → ✅ / 12a34 → ❌
console.log("Q3");
console.log(/^[0-9]+$/.test("12345"));

// 4. 한글만 포함된 문자열인지 검사하는 정규식을 작성하시오.
//  예시: 안녕하세요 → ✅ / Hello123 → ❌ 
console.log("Q4");
console.log(/^[ㄱ-ㅎ가-힣]+$/.test("안녕하세요"));

// 5. 비밀번호가 영문자+숫자 조합으로 6~12자리인지 검사하는 정규식을 작성하시오.
//  예시: abc123 → ✅ / ab → ❌
console.log("Q5");
console.log(/^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{6,12}/.test("abc123"));
// 5-1. 특수문자도 포함하는지
console.log("Q5-1");
console.log(/^(?=.*[A-Za-z])(?=.*\d)(?=.*[!@#$%^&*])[A-Za-z\d!@#$%^&*]{6,12}$/.test("abc123!@"));
/*
    ? :  최대 한번 <=> + : 최소 한번
    (?=.*[A-Za-z]) : 문자열 어딘가에 영문자가 최소 1개가 있어야 한다.
    (?=.*\d) : 문자열 어딘가에 숫자가 최소 1개가 있어야 한다.
    (?=.*[!@#$%^&*]) : 문자열 어딘가에 []안의 특수문자가 최소 1개가 있어야 한다.
*/

// 6. 문자열에서 모든 숫자를 찾아 배열로 반환하는 정규식을 작성하시오.
//  예시: '가격은 2000원이고, 할인은 300원입니다.' → [2000, 300]
console.log("Q6");
let regex1 = /\d+/g;       // [숫자]원 찾기
console.log('가격은 2000원이고, 할인은 300원입니다.'.match(regex1));
let regex2 = /\d+(?=원)/g;  // 숫자 + "원" 찾기
console.log('가격은 2000원이고, 할인은 300원입니다.'.match(regex2));
/*
    \d : 숫자
    match(regex1) : 숫자인 것만 배열에 담음
    return : ["2000", "300"]
*/
// 7. 공백(스페이스, 탭, 줄바꿈 등)을 하나 이상 포함하는 문자열인지 검사하는 정규식을 작성하시오.
console.log("Q7");
console.log(/\s/.test("안 녕하세요"));
/*
    \s : Space 공백
*/

// 8. 주민등록번호 형식(6자리-7자리)인지 검사하는 정규식을 작성하시오.
//  예시: 900101-1234567 → ✅ / 9001011234567 → ❌
console.log("Q8");
console.log(/^\d{6}-\d{7}$/.test("900101-1234567"));

// 9. 문자열에서 HTML 태그를 모두 제거하는 정규식을 작성하시오.
//  예시: '<h1>제목</h1>' → '제목'
console.log("Q9");
console.log('<h1>제목</h1>'.replace(/<[^>]+>/g, ""));

// 9-1 전화번호에서 -(하이픈 빼기)
console.log("Q9-1");
let str = "010-1234-5678";
console.log(str);
str = str.replace(/\D/g, "");
// \D : 숫자가 아닌 것
console.log(str);

// 10. URL 형식이 맞는지 검사하는 정규식을 작성하시오.
//  예시: https://www.google.com → ✅ / just_text → ❌
console.log("Q10");
console.log(/^(https|http|ftp):\/\/[^\s/$.?#].[^\s]*$/i.test("https://www.google.com"));
/*
    ^(https|http|ftp):\/\/ : 문자열 시작은 http:// 를 의미(https, ftp 포함)
    \s : 공백
    ^\s/$.?# : 에서 ^ = not,  /, $, ., ?, # 가 아닌 문자를 의미
    URL의 도메인 첫 글자가 위 문자를 제외
    .[^\s] : . 뒤에는 공백만 아니면 됨
*/